{"version":3,"file":"static/js/672.e5129c32.chunk.js","mappings":"qPAIIA,EAA0B,SAACC,GAAK,MAAM,CACxCC,OAAQD,EAAME,KAAKD,OACpB,EAGYE,EAAmB,SAACC,GAAe,IACxCC,EAAiB,qGAMpB,OANoB,8BACrB,WACE,OAAKC,KAAKC,MAAMN,QAGT,SAACG,GAAS,UAAKE,KAAKC,SAFlB,SAAC,KAAQ,CAACC,GAAI,UAGzB,KAAC,EANoB,CAASC,EAAAA,WAahC,OAJqCC,EAAAA,EAAAA,IAAQX,EAARW,CACnCL,EAIJ,C,0FCvBA,GAAgB,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,GAAK,qB,SCW3K,EATgB,SAACE,GACf,OACE,iBAAKI,UAAWC,EAAAA,QAAU,WACxB,iBAAMD,UAAWC,EAAAA,GAAK,SAAEL,EAAMM,MAC9B,yBAAMN,EAAMO,YAGlB,E,UCaA,EAnBmB,SAACP,GAClB,IAAIQ,EAAO,YAAcR,EAAMM,GAC/B,OACE,iBAAKF,UAAWC,EAAAA,OAAS,WACvB,0BACE,gBAAKI,IAAI,2GAEX,0BACE,SAAC,KAAO,CACNR,GAAIO,EACJJ,UAAW,SAACM,GAAO,OAAMA,EAAQC,SAAWN,EAAAA,OAAW,EAAE,EAAE,SAE1DL,EAAMY,WAKjB,E,oBCSMC,EAAiB,SAACb,GACtB,IAAMc,EAAkCC,EAAAA,KAAaC,MAAM,CACzDC,eAAgBF,EAAAA,OAYlB,OACE,SAAC,KAAM,CACLG,cAAe,CACbD,eAAgB,IAElBE,gBAAc,EACdC,SAAU,SAACC,EAAO,GAAoB,IAAjBC,EAAS,EAATA,WAfL,SAACD,GACnBrB,EAAMuB,YAAYF,EAAOJ,eAM3B,CASMO,CAAcH,GACdC,GACF,EACAG,iBAAkBX,EAAgC,SAEjD,gBACCO,EAAM,EAANA,OACAK,EAAM,EAANA,OACAC,EAAO,EAAPA,QACAC,EAAY,EAAZA,aACAC,EAAU,EAAVA,WACAC,EAAO,EAAPA,QACAC,EAAY,EAAZA,aACAC,EAAK,EAALA,MAAK,OAEL,4BACE,qBACEC,YAAY,qBACZ7B,UAAWC,EAAAA,MACXO,KAAM,iBACNsB,SAAUN,EACVO,OAAQN,EACRO,MAAOf,EAAOJ,iBAEfU,EAAQV,gBAAkBS,EAAOT,iBAChC,cAAGb,UAAWC,EAAAA,MAAQ,SAAEqB,EAAOT,kBAGjC,0BACE,mBACEoB,UAAWP,IAAYE,EACvBM,QAASP,EACTQ,KAAM,SAAS,8BAKf,GAId,EAEA,EAtFgB,SAACvC,GACf,IAAIP,EAAQO,EAAMwC,YAEdC,EAAiBhD,EAAMiD,YAAYC,KAAI,SAACC,GAC1C,OAAO,SAAC,EAAU,CAAChC,KAAMgC,EAAOC,SAA0BvC,GAAIsC,EAAOtC,IAAtBsC,EAAOtC,GACxD,IACIwC,EAAiBrD,EAAMsD,aAAaJ,KAAI,SAACK,GAC3C,OAAO,SAAC,EAAO,CAACzC,QAASyC,EAAOzC,QAAyBD,GAAI0C,EAAO1C,IAAtB0C,EAAO1C,GACvD,IAGA,OACE,iBAAKF,UAAWC,EAAAA,QAAU,WACxB,gBAAKD,UAAWC,EAAAA,aAAe,SAAEoC,KACjC,iBAAKrC,UAAWC,EAAAA,SAAW,WACzB,yBAAMyC,KACN,SAACjC,EAAc,CAACU,YAAavB,EAAMuB,mBAI3C,E,oBCTA,GAAe0B,E,QAAAA,KACb9C,EAAAA,EAAAA,KAboB,SAACV,GACrB,MAAO,CAAE+C,YAAa/C,EAAM+C,YAC9B,IAEyB,SAACU,GACxB,MAAO,CACL3B,YAAa,SAACN,GACZiC,GAASC,EAAAA,EAAAA,GAAyBlC,GACpC,EAEJ,IAIErB,EAAAA,EAFF,CAGEwD,E","sources":["HOC/WiithAuthRedirect.js","webpack://react_holodcov_1/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/Message/Message.jsx","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"sourcesContent":["import React from \"react\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\nlet mapStateToPropsRedirect = (state) => ({\r\n  isAuth: state.auth.isAuth,\r\n});\r\n\r\n//HOC High order Component\r\nexport const WithAuthRedirect = (Component) => {\r\n  class RedirectComponent extends React.Component {\r\n    render() {\r\n      if (!this.props.isAuth) {\r\n        return <Navigate to={\"/login\"} />;\r\n      }\r\n      return <Component {...this.props} />;\r\n    }\r\n  }\r\n\r\n  let ConnectedAuthRedirectComponent = connect(mapStateToPropsRedirect)(\r\n    RedirectComponent\r\n  );\r\n\r\n  return ConnectedAuthRedirectComponent;\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__gciy6\",\"dialogsItems\":\"Dialogs_dialogsItems__kneEn\",\"active\":\"Dialogs_active__sEGsH\",\"messages\":\"Dialogs_messages__2yQnQ\",\"id\":\"Dialogs_id__AmMxE\"};","import React from \"react\";\r\nimport s from \"../Dialogs.module.css\";\r\n\r\nconst Message = (props) => {\r\n  return (\r\n    <div className={s.message}>\r\n      <span className={s.id}>{props.id}</span>\r\n      <div>{props.message}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Message;\r\n","import React from \"react\";\r\nimport s from \"../Dialogs.module.css\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst DialogItem = (props) => {\r\n  let path = \"/dialogs/\" + props.id;\r\n  return (\r\n    <div className={s.dialog}>\r\n      <div>\r\n        <img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRbUyGzy0hd_quVvYzJhn-wKCiIcH5wz291Pw&usqp=CAU\"></img>\r\n      </div>\r\n      <div>\r\n        <NavLink\r\n          to={path}\r\n          className={(navData) => (navData.isActive ? s.active : \"\")}\r\n        >\r\n          {props.name}\r\n        </NavLink>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DialogItem;\r\n","import React from \"react\";\r\nimport s from \"./Dialogs.module.css\";\r\nimport Message from \"./Message/Message\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { Formik, Form, Field, ErrorMessage, FieldArray } from \"formik\";\r\nimport * as yup from \"yup\";\r\n\r\nconst Dialogs = (props) => {\r\n  let state = props.dialogsPage;\r\n\r\n  let dialogsElement = state.dialogsData.map((dialog) => {\r\n    return <DialogItem name={dialog.userName} key={dialog.id} id={dialog.id} />;\r\n  });\r\n  let messageElement = state.messagesData.map((phrase) => {\r\n    return <Message message={phrase.message} key={phrase.id} id={phrase.id} />;\r\n  });\r\n\r\n  //UI\r\n  return (\r\n    <div className={s.dialogs}>\r\n      <div className={s.dialogsItems}>{dialogsElement}</div>\r\n      <div className={s.messages}>\r\n        <div>{messageElement}</div>\r\n        <AddMessageForm sendMessage={props.sendMessage} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst AddMessageForm = (props) => {\r\n  const validationSchemaSendMessageForm = yup.object().shape({\r\n    newMessageBody: yup.string(),\r\n  });\r\n\r\n  let addNewMessage = (values) => {\r\n    props.sendMessage(values.newMessageBody);\r\n    // values.newMessageBody = \"\";\r\n    //Вместо такого затирания использовать на onSubmit={(values, { resetForm }) => {\r\n    //   какие-то действия;\r\n    //   resetForm();\r\n    // }}\r\n  };\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        newMessageBody: \"\",\r\n      }}\r\n      validateOnBlur\r\n      onSubmit={(values, { resetForm }) => {\r\n        addNewMessage(values);\r\n        resetForm();\r\n      }}\r\n      validationSchema={validationSchemaSendMessageForm}\r\n    >\r\n      {({\r\n        values,\r\n        errors,\r\n        touched,\r\n        handleChange,\r\n        handleBlur,\r\n        isValid,\r\n        handleSubmit,\r\n        dirty,\r\n      }) => (\r\n        <div>\r\n          <textarea\r\n            placeholder=\"Enter your message\"\r\n            className={s.input}\r\n            name={\"newMessageBody\"}\r\n            onChange={handleChange}\r\n            onBlur={handleBlur}\r\n            value={values.newMessageBody}\r\n          ></textarea>\r\n          {touched.newMessageBody && errors.newMessageBody && (\r\n            <p className={s.error}>{errors.newMessageBody}</p>\r\n          )}\r\n\r\n          <div>\r\n            <button\r\n              disabled={!isValid && !dirty}\r\n              onClick={handleSubmit}\r\n              type={\"submit\"}\r\n            >\r\n              Send message\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default Dialogs;\r\n","import React from \"react\";\r\nimport { sendMessageActionCreator } from \"../../redux/dialog-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport { connect } from \"react-redux\";\r\nimport { WithAuthRedirect } from \"../../HOC/WiithAuthRedirect\";\r\nimport { compose } from \"redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n  return { dialogsPage: state.dialogsPage };\r\n};\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    sendMessage: (newMessageBody) => {\r\n      dispatch(sendMessageActionCreator(newMessageBody));\r\n    },\r\n  };\r\n};\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, mapDispatchToProps),\r\n  WithAuthRedirect\r\n)(Dialogs);\r\n"],"names":["mapStateToPropsRedirect","state","isAuth","auth","WithAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","className","s","id","message","path","src","navData","isActive","name","AddMessageForm","validationSchemaSendMessageForm","yup","shape","newMessageBody","initialValues","validateOnBlur","onSubmit","values","resetForm","sendMessage","addNewMessage","validationSchema","errors","touched","handleChange","handleBlur","isValid","handleSubmit","dirty","placeholder","onChange","onBlur","value","disabled","onClick","type","dialogsPage","dialogsElement","dialogsData","map","dialog","userName","messageElement","messagesData","phrase","compose","dispatch","sendMessageActionCreator","Dialogs"],"sourceRoot":""}